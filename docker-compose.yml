version: '3.8'

services:
  airflow-webserver:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-webserver
    user: "0:0"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      # - AIRFLOW__WEBSERVER__SECRET_KEY=${WEBSERVER_SECRET_KEY:-}
      - AIRFLOW__CLI__ENDPOINT_URL=http://localhost:8080
    ports:
      - "8080:8080"
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./airflow/config:/opt/airflow/config
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - project_network
    command: webserver
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:8080/health" ]
      interval: 120s
      timeout: 60s
      retries: 5
      start_period: 120s
    restart: unless-stopped

  airflow-scheduler:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-scheduler
    hostname: airflow-scheduler
    user: "0:0"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK=true
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./airflow/config:/opt/airflow/config
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - project_network
    command: scheduler
    healthcheck:
      test: [ "CMD", "airflow", "jobs", "check", "--job-type", "SchedulerJob", "--hostname", "airflow-scheduler" ]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 90s
    restart: unless-stopped

  airflow-worker-1:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-worker-1
    user: "0:0"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./airflow/config:/opt/airflow/config
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - project_network
    command: celery worker
    healthcheck:
      test: [ "CMD", "celery", "--app", "airflow.executors.celery_executor.app", "inspect", "ping", "-d", "celery@$${HOSTNAME}" ]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 90s
    restart: unless-stopped

  airflow-worker-2:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-worker-2
    user: "0:0"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./data:/opt/airflow/data
      - ./airflow/config:/opt/airflow/config
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - project_network
    command: celery worker
    healthcheck:
      test: [ "CMD", "celery", "--app", "airflow.executors.celery_executor.app", "inspect", "ping", "-d", "celery@$${HOSTNAME}" ]
      interval: 60s
      timeout: 30s
      retries: 5
      start_period: 90s
    restart: unless-stopped

  airflow-flower:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-flower
    user: "0:0"
    depends_on:
      airflow-init:
        condition: service_completed_successfully
      redis:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    ports:
      - "5555:5555"
    networks:
      - project_network
    command: celery flower
    healthcheck:
      test: [ "CMD", "curl", "--fail", "http://localhost:5555" ]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 60s
    restart: unless-stopped

  airflow-init:
    build:
      context: ./airflow
      dockerfile: Dockerfile
    container_name: airflow-init
    user: "0:0"
    depends_on:
      redis:
        condition: service_healthy
    environment:
      - AIRFLOW__CORE__EXECUTOR=CeleryExecutor
      - AIRFLOW__DATABASE__SQL_ALCHEMY_CONN=postgresql+psycopg2://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CELERY__RESULT_BACKEND=db+postgresql://airflow:airflow@postgres:5432/airflow
      - AIRFLOW__CELERY__BROKER_URL=redis://redis:6379/0
      - AIRFLOW__CORE__LOAD_EXAMPLES=false
      - _AIRFLOW_DB_UPGRADE=true
      - _AIRFLOW_WWW_USER_CREATE=true
      - _AIRFLOW_WWW_USER_USERNAME=airflow
      - _AIRFLOW_WWW_USER_PASSWORD=airflow
    volumes:
      - ./airflow/dags:/opt/airflow/dags
      - ./airflow/logs:/opt/airflow/logs
      - ./airflow/plugins:/opt/airflow/plugins
      - ./airflow/config:/opt/airflow/config
    #      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - project_network
    command: version

  redis:
    image: redis:latest
    container_name: airflow-redis
    networks:
      - project_network
    ports:
      - "6379:6379"
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  postgres:
    image: postgres:13
    container_name: airflow-postgres
    hostname: postgres
    environment:
      - POSTGRES_DB=airflow
      - POSTGRES_USER=airflow
      - POSTGRES_PASSWORD=airflow
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - project_network
    ports:
      - "5433:5432"
    healthcheck:
      test: [ "CMD", "pg_isready", "-U", "airflow","-d","airflow" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    container_name: zookeeper
    hostname: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - project_network
    restart: unless-stopped

  kafka:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - zookeeper
    hostname: kafka
    container_name: kafka
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    networks:
      - project_network
    healthcheck:
      test: [ "CMD", "kafka-topics", "--bootstrap-server", "localhost:9092", "--list" ]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    restart: unless-stopped

  kafka-topic-setup:
    image: confluentinc/cp-kafka:7.5.0
    depends_on:
      - kafka
    command: >
      bash -c "
        echo 'Waiting for Kafka to be ready...'
        cub kafka-ready -b kafka:9092 1 60
        echo 'Creating topics...'
        kafka-topics --create --if-not-exists --bootstrap-server kafka:9092 --topic logs --partitions 1 --replication-factor 1
        echo 'Topics created!'
      "
    networks:
      - project_network

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: dataco-kafka
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      - kafka
    networks:
      - project_network
    restart: unless-stopped
  #

#
#  dbt:
#    image: ghcr.io/dbt-labs/dbt-snowflake:latest
#    container_name: dbt
#    volumes:
#      - ./dbt_project:/usr/app/dbt/
#    environment:
#      - SNOWFLAKE_ACCOUNT=${SNOWFLAKE_ACCOUNT}
#      - SNOWFLAKE_USER=${SNOWFLAKE_USER}
#      - SNOWFLAKE_PASSWORD=${SNOWFLAKE_PASSWORD}
#      #      - SNOWFLAKE_ROLE=ACCOUNTADMIN
#      - SNOWFLAKE_DATABASE=${SNOWFLAKE_DATABASE}
#      - SNOWFLAKE_WAREHOUSE=${SNOWFLAKE_WAREHOUSE}
#      - SNOWFLAKE_SCHEMA=${SNOWFLAKE_SCHEMA}
#    working_dir: /usr/app/dbt
#    entrypoint: ["/bin/bash", "-c"]
#    command: ["dbt init"]  # Keeps container idle
#    restart: unless-stopped
  dbt:
    build:
      context: ./dbt
      dockerfile: Dockerfile
    container_name: dbt
    volumes:
      - ~/.dbt:/root/.dbt
      - ./DataCamp:/usr/app/dbt/DataCamp
    working_dir: /usr/app/dbt/DataCamp
    environment:
      - DBT_PROFILES_DIR=/root/.dbt
    networks:
      - project_network
#    command: [ "/bin/bash", "-c", "mkdir -p /usr/app/dbt/DataCamp" ]
    tty: true





volumes:
  postgres_data:

networks:
  project_network:
    driver: bridge